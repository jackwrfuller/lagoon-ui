import React, { useState } from 'react';
import { Mutation } from 'react-apollo';

import Link from 'next/link';

import { DeleteOutlined, EyeOutlined } from '@ant-design/icons';
import RemoveUserConfirm from 'components/Organizations/RemoveUserConfirm';
import gql from 'graphql-tag';

import PaginatedTable from '../PaginatedTable/PaginatedTable';
import { TableActions } from '../SharedStyles';
import { StyledGroupMembers } from './Styles';

export const getLinkData = (userSlug, organizationSlug, organizationName) => ({
  urlObject: {
    pathname: '/organizations/users',
    query: { user: userSlug, organizationSlug: organizationSlug, organizationName: organizationName },
  },
  asPath: `/organizations/${organizationSlug}/users/${userSlug}`,
});

const REMOVE_USER_FROM_GROUP = gql`
  mutation removeUserFromGroup($groupName: String!, $email: String!) {
    removeUserFromGroup(input: { group: { name: $groupName }, user: { email: $email } }) {
      name
    }
  }
`;

/**
 * The primary list of members.
 */
const GroupMembers = ({
  members = [],
  groupName,
  organizationName,
  organizationId,
  projectDefaultGroup,
  onUserRemove,
}) => {
  const duRegex = new RegExp('^default-user@' + groupName.replace('project-', '') + '$', 'g');

  const UserColumns = [
    {
      width: '20%',
      key: 'name',
      render: ({ user }) => {
        const name = user.name;
        return name ? <div className="name">{name}</div> : <>-</>;
      },
    },
    {
      width: '20%',
      key: 'lastName',
      render: ({ user }) => {
        const lastName = user.lastName;
        return lastName ? <div className="lastname">{lastName}</div> : <>-</>;
      },
    },
    {
      width: '20%',
      key: 'email',
      render: ({ user }) => {
        const linkData = getLinkData(user.email, organizationId, organizationName);
        return (
          <div className="email">
            <Link href={linkData.urlObject} as={linkData.asPath}>
              <a> {user.email}</a>
            </Link>
          </div>
        );
      },
    },
    {
      width: '10%',
      key: 'role',
      render: u => {
        return <div className="role">{u.role}</div>;
      },
    },
    {
      width: '10%',
      key: 'separator',
      render: () => {
        return <></>;
      },
    },
    {
      width: '10%',
      key: 'actions',
      render: ({ user }) => {
        const linkData = getLinkData(user.email, organizationId, organizationName);
        return (
          <TableActions>
            <Link href={linkData.urlObject} as={linkData.asPath}>
              <a>
                <EyeOutlined className="view" style={{border:"1px solid #4578E6", padding:"0.5rem", color:"#4578E6"}}/>
              </a>
            </Link>
            <DeleteOutlined className="delete" />
          </TableActions>
        );
      },
    },
  ];

  return (
    <StyledGroupMembers>
      <PaginatedTable limit={10} data={members} columns={UserColumns} labelText="Users" emptyText="No users" />
      <PaginatedTable limit={10} data={members} columns={UserColumns} labelText="Projects" emptyText="No Projects" />
      {/* <div className="header">
        <label>Members</label>
        <label></label>
        <input
          aria-labelledby="search"
          className="searchInput"
          type="text"
          value={searchInput}
          onChange={e => setSearchInput(e.target.value)}
          placeholder="Type to search"
          disabled={members.length === 0}
        />
      </div> */}
      {/* <div className="deployments">
        <div className="data-table">
          {!members.length && <div className="data-none">No members</div>}
          {searchInput && !filteredMembers.length && (
            <div className="data-none">No members matching "{searchInput}"</div>
          )}
          {filteredMembers.map(member => (
            <div key={member.user.email} className="data-row" deployment={member.user.email}>
              <div className="name">
                {member.user.email}{' '}
                {member.user.comment && member.user.comment.includes('autogenerated user for project') && (
                  <label className="system-user-label">system account</label>
                )}
              </div>
              <div className="role">
                <label className={`${member.role}-label`}>{member.role}</label>
              </div>
              <div className="remove">
                {(member.user.comment &&
                  member.user.comment.includes('autogenerated user for project') &&
                  projectDefaultGroup.includes('project') &&
                  member.user.email.match(duRegex) != null) || (
                  <>
                    <Mutation mutation={REMOVE_USER_FROM_GROUP}>
                      {(removeUserFromGroup, { loading, called, error, data }) => {
                        if (error) {
                          return <div>{error.message}</div>;
                        }
                        if (data) {
                          onUserRemove();
                        }
                        return (
                          <RemoveUserConfirm
                            removeName={member.user.email}
                            onRemove={() => {
                              removeUserFromGroup({
                                variables: {
                                  groupName: groupName,
                                  email: member.user.email,
                                },
                              });
                            }}
                          />
                        );
                      }}
                    </Mutation>
                  </>
                )}
              </div>
            </div>
          ))}
        </div>
      </div> */}
    </StyledGroupMembers>
  );
};

export default GroupMembers;
